// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Vehicle_Rent.Data;

#nullable disable

namespace Vehicle_Rent.Migrations
{
    [DbContext(typeof(CarRentalDbContext))]
    partial class CarRentalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AvailibilityStatusWrapper", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AvailibilityStatuses");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Company", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Rating", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RentalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentalId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.RentalItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleCopyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleCopyId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RentalItems");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.VModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VModels");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("int");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VModelId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("VModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.VehicleCopy", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdVehicle")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdVehicle");

                    b.ToTable("VehicleCopies");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Photo", b =>
                {
                    b.HasOne("Vehicle_Rent.Models.Vehicle", "Vehicle")
                        .WithMany("Photos")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Rating", b =>
                {
                    b.HasOne("Vehicle_Rent.Models.RentalItem", "RentalItem")
                        .WithMany("Ratings")
                        .HasForeignKey("RentalId");

                    b.Navigation("RentalItem");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.RentalItem", b =>
                {
                    b.HasOne("Vehicle_Rent.Models.User", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId");

                    b.HasOne("Vehicle_Rent.Models.VehicleCopy", "VehicleCopy")
                        .WithMany("RentalItems")
                        .HasForeignKey("VehicleCopyId");

                    b.HasOne("Vehicle_Rent.Models.Vehicle", null)
                        .WithMany("Rentals")
                        .HasForeignKey("VehicleId");

                    b.Navigation("User");

                    b.Navigation("VehicleCopy");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Vehicle", b =>
                {
                    b.HasOne("Vehicle_Rent.Models.Company", "Company")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Vehicle_Rent.Models.Photo", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("PhotoId");

                    b.HasOne("Vehicle_Rent.Models.VModel", "VModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VModelId");

                    b.Navigation("Company");

                    b.Navigation("VModel");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.VehicleCopy", b =>
                {
                    b.HasOne("Vehicle_Rent.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleCopies")
                        .HasForeignKey("IdVehicle");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Company", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Photo", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.RentalItem", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.User", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.VModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.Vehicle", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Rentals");

                    b.Navigation("VehicleCopies");
                });

            modelBuilder.Entity("Vehicle_Rent.Models.VehicleCopy", b =>
                {
                    b.Navigation("RentalItems");
                });
#pragma warning restore 612, 618
        }
    }
}
